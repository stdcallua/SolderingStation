;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 21.07.2016
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega328P
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;#include <stdlib.h>
;#include <string.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;int temperature; // установлена€ температура
;int fanspeed;// установлена€ скорость вращени€ вентил€тора
;int cur_temperature;// текущ€€ температура
;int cur_fanspeed;// текущ€€ скорость вентил€тора
;//char output[16];
;char* output;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 002C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002D // Place your code here
; 0000 002E 
; 0000 002F }
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0033 {
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0034 // Reinitialize Timer1 value
; 0000 0035 TCNT1H=0x63C0 >> 8;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0036 TCNT1L=0x63C0 & 0xff;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0037 // Place your code here
; 0000 0038 
; 0000 0039 }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0040 {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0041 ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000001D VOL: 0
;	adc_input -> Y+0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0042 // Delay needed for the stabilization of the ADC input voltage
; 0000 0043 delay_us(10);
;PCODE: $00000021 VOL: 0
; 0000 0044 // Start the AD conversion
; 0000 0045 ADCSRA|=(1<<ADSC);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0046 // Wait for the AD conversion to complete
; 0000 0047 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0048 ADCSRA|=(1<<ADIF);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0049 return ADCW;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 004A }
;PCODE: $00000031 VOL: 0
;
;void main(void)
; 0000 004D {
;PCODE: $00000032 VOL: 0
; 0000 004E // Declare your local variables here
; 0000 004F 
; 0000 0050 // Crystal Oscillator division factor: 1
; 0000 0051 #pragma optsize-
; 0000 0052 CLKPR=(1<<CLKPCE);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0053 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0054 #ifdef _OPTIMIZE_SIZE_
; 0000 0055 #pragma optsize+
; 0000 0056 #endif
; 0000 0057 
; 0000 0058 // Input/Output Ports initialization
; 0000 0059 // Port B initialization
; 0000 005A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
; 0000 005B DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 005C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=0
; 0000 005D PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 005E 
; 0000 005F // Port C initialization
; 0000 0060 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0061 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0062 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0063 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0064 
; 0000 0065 // Port D initialization
; 0000 0066 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 0067 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0068 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=T Bit1=T Bit0=T
; 0000 0069 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 006A 
; 0000 006B // Timer/Counter 0 initialization
; 0000 006C // Clock source: System Clock
; 0000 006D // Clock value: Timer 0 Stopped
; 0000 006E // Mode: Normal top=0xFF
; 0000 006F // OC0A output: Disconnected
; 0000 0070 // OC0B output: Disconnected
; 0000 0071 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0072 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0073 TCNT0=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0074 OCR0A=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0075 OCR0B=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0076 
; 0000 0077 // Timer/Counter 1 initialization
; 0000 0078 // Clock source: System Clock
; 0000 0079 // Clock value: 2000,000 kHz
; 0000 007A // Mode: Normal top=0xFFFF
; 0000 007B // OC1A output: Disconnected
; 0000 007C // OC1B output: Disconnected
; 0000 007D // Noise Canceler: Off
; 0000 007E // Input Capture on Falling Edge
; 0000 007F // Timer Period: 20 ms
; 0000 0080 // Timer1 Overflow Interrupt: On
; 0000 0081 // Input Capture Interrupt: Off
; 0000 0082 // Compare A Match Interrupt: Off
; 0000 0083 // Compare B Match Interrupt: Off
; 0000 0084 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0085 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0086 TCNT1H=0x63;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0087 TCNT1L=0xC0;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0088 ICR1H=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0089 ICR1L=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 008A OCR1AH=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 008B OCR1AL=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 008C OCR1BH=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 008D OCR1BL=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 008E 
; 0000 008F // Timer/Counter 2 initialization
; 0000 0090 // Clock source: System Clock
; 0000 0091 // Clock value: 125,000 kHz
; 0000 0092 // Mode: Fast PWM top=OCR2A
; 0000 0093 // OC2A output: Inverted PWM
; 0000 0094 // OC2B output: Disconnected
; 0000 0095 // Timer Period: 8 us
; 0000 0096 // Output Pulse(s):
; 0000 0097 // OC2A Period: 8 us
; 0000 0098 ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0099 TCCR2A=(1<<COM2A1) | (1<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (1<<WGM21) | (1<<WGM20);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 009A TCCR2B=(1<<WGM22) | (1<<CS22) | (0<<CS21) | (1<<CS20);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 009B TCNT2=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 009C OCR2A=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 009D OCR2B=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 009E 
; 0000 009F // Timer/Counter 0 Interrupt(s) initialization
; 0000 00A0 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00A1 
; 0000 00A2 // Timer/Counter 1 Interrupt(s) initialization
; 0000 00A3 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (1<<TOIE1);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00A4 
; 0000 00A5 // Timer/Counter 2 Interrupt(s) initialization
; 0000 00A6 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00A7 
; 0000 00A8 // External Interrupt(s) initialization
; 0000 00A9 // INT0: On
; 0000 00AA // INT0 Mode: Any change
; 0000 00AB // INT1: Off
; 0000 00AC // Interrupt on any change on pins PCINT0-7: Off
; 0000 00AD // Interrupt on any change on pins PCINT8-14: Off
; 0000 00AE // Interrupt on any change on pins PCINT16-23: Off
; 0000 00AF EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (1<<ISC00);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00B0 EIMSK=(0<<INT1) | (1<<INT0);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00B1 EIFR=(0<<INTF1) | (1<<INTF0);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00B2 PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00B3 
; 0000 00B4 // USART initialization
; 0000 00B5 // USART disabled
; 0000 00B6 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00B7 
; 0000 00B8 // Analog Comparator initialization
; 0000 00B9 // Analog Comparator: Off
; 0000 00BA // The Analog Comparator's positive input is
; 0000 00BB // connected to the AIN0 pin
; 0000 00BC // The Analog Comparator's negative input is
; 0000 00BD // connected to the AIN1 pin
; 0000 00BE ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00BF // Digital input buffer on AIN0: On
; 0000 00C0 // Digital input buffer on AIN1: On
; 0000 00C1 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00C2 
; 0000 00C3 // ADC initialization
; 0000 00C4 // ADC Clock frequency: 1000,000 kHz
; 0000 00C5 // ADC Voltage Reference: AVCC pin
; 0000 00C6 // ADC Auto Trigger Source: Free Running
; 0000 00C7 // Digital input buffers on ADC0: Off, ADC1: Off, ADC2: Off, ADC3: Off
; 0000 00C8 // ADC4: Off, ADC5: Off
; 0000 00C9 DIDR0=(1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D) | (1<<ADC2D) | (1<<ADC1D) | (1<<ADC0D);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00CA ADMUX=ADC_VREF_TYPE;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00CB ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00CC ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00CD 
; 0000 00CE // SPI initialization
; 0000 00CF // SPI disabled
; 0000 00D0 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00D1 
; 0000 00D2 // TWI initialization
; 0000 00D3 // TWI disabled
; 0000 00D4 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00D5 
; 0000 00D6 // Alphanumeric LCD initialization
; 0000 00D7 // Connections are specified in the
; 0000 00D8 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00D9 // RS - PORTB Bit 0
; 0000 00DA // RD - PORTB Bit 1
; 0000 00DB // EN - PORTB Bit 2
; 0000 00DC // D4 - PORTB Bit 4
; 0000 00DD // D5 - PORTB Bit 5
; 0000 00DE // D6 - PORTB Bit 6
; 0000 00DF // D7 - PORTB Bit 7
; 0000 00E0 // Characters/line: 16
; 0000 00E1 lcd_init(16);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00E2 
; 0000 00E3 // Global enable interrupts
; 0000 00E4 #asm("sei")
;PCODE: $0000008F VOL: 0
	sei
;PCODE: $00000090 VOL: 0
; 0000 00E5 
; 0000 00E6 lcd_gotoxy(0,0);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00E7 lcd_putsf("  INIT");
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00E8 //temperature = read_adc(0)*0.42;
; 0000 00E9 //fanspeed = read_adc(1)/10.24;
; 0000 00EA delay_ms(1000);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00EB lcd_clear();
;PCODE: $0000009A VOL: 0
; 0000 00EC while (1)
;PCODE: $0000009B VOL: 0
; 0000 00ED       {
; 0000 00EE         delay_us(20);
;PCODE: $0000009C VOL: 0
; 0000 00EF         //temperature = 133;
; 0000 00F0         //temperature++;
; 0000 00F1         //temperature = read_adc(0)*0.42;
; 0000 00F2         temperature = read_adc(0);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00F3         //fanspeed = read_adc(1)/10.24;
; 0000 00F4         itoa(temperature, output);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00F5         //output = strcat(output, "C");
; 0000 00F6         lcd_gotoxy(0,0);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00F7         lcd_puts(output);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00F8         //lcd_gotoxy(0,1);
; 0000 00F9         //lcd_puts(output);
; 0000 00FA       }
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00FB }
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
