
SolderingStation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000bb4  00000c48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bb4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800152  00800152  00000c9a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ccc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000104a  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003f4  00000000  00000000  00001e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d1  00000000  00000000  0000223a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  0000270c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003da  00000000  00000000  00002a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bf9  00000000  00000000  00002dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000039e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e5       	ldi	r26, 0x52	; 82
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 35       	cpi	r26, 0x5F	; 95
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 13 03 	call	0x626	; 0x626 <main>
  9e:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_10us_delay>:
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <lcd_10us_delay+0x6>
  ac:	00 d0       	rcall	.+0      	; 0xae <lcd_10us_delay+0x8>
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	69 83       	std	Y+1, r22	; 0x01
  b4:	7a 83       	std	Y+2, r23	; 0x02
  b6:	8b 83       	std	Y+3, r24	; 0x03
  b8:	9c 83       	std	Y+4, r25	; 0x04
  ba:	89 81       	ldd	r24, Y+1	; 0x01
  bc:	9a 81       	ldd	r25, Y+2	; 0x02
  be:	ab 81       	ldd	r26, Y+3	; 0x03
  c0:	bc 81       	ldd	r27, Y+4	; 0x04
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	aa 1f       	adc	r26, r26
  c8:	bb 1f       	adc	r27, r27
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	aa 1f       	adc	r26, r26
  d0:	bb 1f       	adc	r27, r27
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	aa 1f       	adc	r26, r26
  d8:	bb 1f       	adc	r27, r27
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	aa 1f       	adc	r26, r26
  e0:	bb 1f       	adc	r27, r27
  e2:	89 83       	std	Y+1, r24	; 0x01
  e4:	9a 83       	std	Y+2, r25	; 0x02
  e6:	ab 83       	std	Y+3, r26	; 0x03
  e8:	bc 83       	std	Y+4, r27	; 0x04
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	9a 81       	ldd	r25, Y+2	; 0x02
  ee:	ab 81       	ldd	r26, Y+3	; 0x03
  f0:	bc 81       	ldd	r27, Y+4	; 0x04
  f2:	89 2b       	or	r24, r25
  f4:	8a 2b       	or	r24, r26
  f6:	8b 2b       	or	r24, r27
  f8:	99 f0       	breq	.+38     	; 0x120 <lcd_10us_delay+0x7a>
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	9a 81       	ldd	r25, Y+2	; 0x02
  fe:	ab 81       	ldd	r26, Y+3	; 0x03
 100:	bc 81       	ldd	r27, Y+4	; 0x04
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	a1 09       	sbc	r26, r1
 106:	b1 09       	sbc	r27, r1
 108:	89 83       	std	Y+1, r24	; 0x01
 10a:	9a 83       	std	Y+2, r25	; 0x02
 10c:	ab 83       	std	Y+3, r26	; 0x03
 10e:	bc 83       	std	Y+4, r27	; 0x04
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	9a 81       	ldd	r25, Y+2	; 0x02
 114:	ab 81       	ldd	r26, Y+3	; 0x03
 116:	bc 81       	ldd	r27, Y+4	; 0x04
 118:	89 2b       	or	r24, r25
 11a:	8a 2b       	or	r24, r26
 11c:	8b 2b       	or	r24, r27
 11e:	69 f7       	brne	.-38     	; 0xfa <lcd_10us_delay+0x54>
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <lcd_strobe>:
 12e:	5b 9a       	sbi	0x0b, 3	; 11
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_10us_delay>
 13c:	5b 98       	cbi	0x0b, 3	; 11
 13e:	08 95       	ret

00000140 <lcd_high>:
 140:	88 23       	and	r24, r24
 142:	14 f4       	brge	.+4      	; 0x148 <lcd_high+0x8>
 144:	5f 9a       	sbi	0x0b, 7	; 11
 146:	01 c0       	rjmp	.+2      	; 0x14a <lcd_high+0xa>
 148:	5f 98       	cbi	0x0b, 7	; 11
 14a:	86 ff       	sbrs	r24, 6
 14c:	02 c0       	rjmp	.+4      	; 0x152 <lcd_high+0x12>
 14e:	5e 9a       	sbi	0x0b, 6	; 11
 150:	01 c0       	rjmp	.+2      	; 0x154 <lcd_high+0x14>
 152:	5e 98       	cbi	0x0b, 6	; 11
 154:	85 ff       	sbrs	r24, 5
 156:	02 c0       	rjmp	.+4      	; 0x15c <lcd_high+0x1c>
 158:	5d 9a       	sbi	0x0b, 5	; 11
 15a:	01 c0       	rjmp	.+2      	; 0x15e <lcd_high+0x1e>
 15c:	5d 98       	cbi	0x0b, 5	; 11
 15e:	84 ff       	sbrs	r24, 4
 160:	02 c0       	rjmp	.+4      	; 0x166 <lcd_high+0x26>
 162:	5c 9a       	sbi	0x0b, 4	; 11
 164:	08 95       	ret
 166:	5c 98       	cbi	0x0b, 4	; 11
 168:	08 95       	ret

0000016a <lcd_low>:
 16a:	83 ff       	sbrs	r24, 3
 16c:	02 c0       	rjmp	.+4      	; 0x172 <lcd_low+0x8>
 16e:	5f 9a       	sbi	0x0b, 7	; 11
 170:	01 c0       	rjmp	.+2      	; 0x174 <lcd_low+0xa>
 172:	5f 98       	cbi	0x0b, 7	; 11
 174:	82 ff       	sbrs	r24, 2
 176:	02 c0       	rjmp	.+4      	; 0x17c <lcd_low+0x12>
 178:	5e 9a       	sbi	0x0b, 6	; 11
 17a:	01 c0       	rjmp	.+2      	; 0x17e <lcd_low+0x14>
 17c:	5e 98       	cbi	0x0b, 6	; 11
 17e:	81 ff       	sbrs	r24, 1
 180:	02 c0       	rjmp	.+4      	; 0x186 <lcd_low+0x1c>
 182:	5d 9a       	sbi	0x0b, 5	; 11
 184:	01 c0       	rjmp	.+2      	; 0x188 <lcd_low+0x1e>
 186:	5d 98       	cbi	0x0b, 5	; 11
 188:	80 ff       	sbrs	r24, 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <lcd_low+0x26>
 18c:	5c 9a       	sbi	0x0b, 4	; 11
 18e:	08 95       	ret
 190:	5c 98       	cbi	0x0b, 4	; 11
 192:	08 95       	ret

00000194 <lcd_write>:
 194:	cf 93       	push	r28
 196:	c8 2f       	mov	r28, r24
 198:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_high>
 19c:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_strobe>
 1a0:	8c 2f       	mov	r24, r28
 1a2:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_low>
 1a6:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_strobe>
 1aa:	65 e0       	ldi	r22, 0x05	; 5
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_10us_delay>
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <lcd_clrscr>:
 1ba:	28 98       	cbi	0x05, 0	; 5
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_write>
 1c2:	68 ec       	ldi	r22, 0xC8	; 200
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_10us_delay>
 1ce:	08 95       	ret

000001d0 <lcd_return>:
 1d0:	28 98       	cbi	0x05, 0	; 5
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_write>
 1d8:	68 ec       	ldi	r22, 0xC8	; 200
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_10us_delay>
 1e4:	08 95       	ret

000001e6 <cursor_shift>:
 1e6:	28 98       	cbi	0x05, 0	; 5
 1e8:	8c 33       	cpi	r24, 0x3C	; 60
 1ea:	19 f0       	breq	.+6      	; 0x1f2 <cursor_shift+0xc>
 1ec:	8e 33       	cpi	r24, 0x3E	; 62
 1ee:	29 f0       	breq	.+10     	; 0x1fa <cursor_shift+0x14>
 1f0:	08 95       	ret
 1f2:	80 e1       	ldi	r24, 0x10	; 16
 1f4:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_write>
 1f8:	08 95       	ret
 1fa:	84 e1       	ldi	r24, 0x14	; 20
 1fc:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_write>
 200:	08 95       	ret

00000202 <lcd_goto>:
 202:	28 98       	cbi	0x05, 0	; 5
 204:	83 30       	cpi	r24, 0x03	; 3
 206:	a9 f0       	breq	.+42     	; 0x232 <lcd_goto+0x30>
 208:	28 f4       	brcc	.+10     	; 0x214 <lcd_goto+0x12>
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	41 f0       	breq	.+16     	; 0x21e <lcd_goto+0x1c>
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	59 f0       	breq	.+22     	; 0x228 <lcd_goto+0x26>
 212:	08 95       	ret
 214:	84 30       	cpi	r24, 0x04	; 4
 216:	91 f0       	breq	.+36     	; 0x23c <lcd_goto+0x3a>
 218:	85 30       	cpi	r24, 0x05	; 5
 21a:	a9 f0       	breq	.+42     	; 0x246 <lcd_goto+0x44>
 21c:	08 95       	ret
 21e:	86 2f       	mov	r24, r22
 220:	80 68       	ori	r24, 0x80	; 128
 222:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_write>
 226:	08 95       	ret
 228:	86 2f       	mov	r24, r22
 22a:	80 6c       	ori	r24, 0xC0	; 192
 22c:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_write>
 230:	08 95       	ret
 232:	86 2f       	mov	r24, r22
 234:	80 69       	ori	r24, 0x90	; 144
 236:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_write>
 23a:	08 95       	ret
 23c:	86 2f       	mov	r24, r22
 23e:	80 6d       	ori	r24, 0xD0	; 208
 240:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_write>
 244:	08 95       	ret
 246:	86 2f       	mov	r24, r22
 248:	80 64       	ori	r24, 0x40	; 64
 24a:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_write>
 24e:	08 95       	ret

00000250 <lcd_setmode>:
 250:	28 98       	cbi	0x05, 0	; 5
 252:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_write>
 256:	08 95       	ret

00000258 <lcd_putc>:
 258:	28 9a       	sbi	0x05, 0	; 5
 25a:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_write>
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_10us_delay>
 26a:	08 95       	ret

0000026c <lcd_puts>:
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	ec 01       	movw	r28, r24
 272:	88 81       	ld	r24, Y
 274:	88 23       	and	r24, r24
 276:	09 f1       	breq	.+66     	; 0x2ba <lcd_puts+0x4e>
 278:	21 96       	adiw	r28, 0x01	; 1
 27a:	8a 30       	cpi	r24, 0x0A	; 10
 27c:	29 f4       	brne	.+10     	; 0x288 <lcd_puts+0x1c>
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	0e 94 01 01 	call	0x202	; 0x202 <lcd_goto>
 286:	16 c0       	rjmp	.+44     	; 0x2b4 <lcd_puts+0x48>
 288:	8d 30       	cpi	r24, 0x0D	; 13
 28a:	19 f4       	brne	.+6      	; 0x292 <lcd_puts+0x26>
 28c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_return>
 290:	11 c0       	rjmp	.+34     	; 0x2b4 <lcd_puts+0x48>
 292:	89 30       	cpi	r24, 0x09	; 9
 294:	69 f4       	brne	.+26     	; 0x2b0 <lcd_puts+0x44>
 296:	8e e3       	ldi	r24, 0x3E	; 62
 298:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <cursor_shift>
 29c:	8e e3       	ldi	r24, 0x3E	; 62
 29e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <cursor_shift>
 2a2:	8e e3       	ldi	r24, 0x3E	; 62
 2a4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <cursor_shift>
 2a8:	8e e3       	ldi	r24, 0x3E	; 62
 2aa:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <cursor_shift>
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <lcd_puts+0x48>
 2b0:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_putc>
 2b4:	89 91       	ld	r24, Y+
 2b6:	81 11       	cpse	r24, r1
 2b8:	e0 cf       	rjmp	.-64     	; 0x27a <lcd_puts+0xe>
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <lcd_loadchar>:
 2c0:	0f 93       	push	r16
 2c2:	1f 93       	push	r17
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	8c 01       	movw	r16, r24
 2ca:	66 0f       	add	r22, r22
 2cc:	66 0f       	add	r22, r22
 2ce:	66 0f       	add	r22, r22
 2d0:	85 e0       	ldi	r24, 0x05	; 5
 2d2:	0e 94 01 01 	call	0x202	; 0x202 <lcd_goto>
 2d6:	e8 01       	movw	r28, r16
 2d8:	08 5f       	subi	r16, 0xF8	; 248
 2da:	1f 4f       	sbci	r17, 0xFF	; 255
 2dc:	89 91       	ld	r24, Y+
 2de:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_putc>
 2e2:	c0 17       	cp	r28, r16
 2e4:	d1 07       	cpc	r29, r17
 2e6:	d1 f7       	brne	.-12     	; 0x2dc <lcd_loadchar+0x1c>
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 01 01 	call	0x202	; 0x202 <lcd_goto>
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	08 95       	ret

000002fa <lcd_itos>:
 2fa:	4f 92       	push	r4
 2fc:	5f 92       	push	r5
 2fe:	6f 92       	push	r6
 300:	7f 92       	push	r7
 302:	8f 92       	push	r8
 304:	9f 92       	push	r9
 306:	af 92       	push	r10
 308:	bf 92       	push	r11
 30a:	cf 92       	push	r12
 30c:	df 92       	push	r13
 30e:	ef 92       	push	r14
 310:	ff 92       	push	r15
 312:	4b 01       	movw	r8, r22
 314:	5c 01       	movw	r10, r24
 316:	99 23       	and	r25, r25
 318:	5c f4       	brge	.+22     	; 0x330 <lcd_itos+0x36>
 31a:	8d e2       	ldi	r24, 0x2D	; 45
 31c:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_putc>
 320:	b0 94       	com	r11
 322:	a0 94       	com	r10
 324:	90 94       	com	r9
 326:	80 94       	com	r8
 328:	81 1c       	adc	r8, r1
 32a:	91 1c       	adc	r9, r1
 32c:	a1 1c       	adc	r10, r1
 32e:	b1 1c       	adc	r11, r1
 330:	8a e0       	ldi	r24, 0x0A	; 10
 332:	88 16       	cp	r8, r24
 334:	91 04       	cpc	r9, r1
 336:	a1 04       	cpc	r10, r1
 338:	b1 04       	cpc	r11, r1
 33a:	0c f4       	brge	.+2      	; 0x33e <lcd_itos+0x44>
 33c:	6b c0       	rjmp	.+214    	; 0x414 <lcd_itos+0x11a>
 33e:	c1 2c       	mov	r12, r1
 340:	d1 2c       	mov	r13, r1
 342:	76 01       	movw	r14, r12
 344:	c3 94       	inc	r12
 346:	cc 0c       	add	r12, r12
 348:	dd 1c       	adc	r13, r13
 34a:	ee 1c       	adc	r14, r14
 34c:	ff 1c       	adc	r15, r15
 34e:	d7 01       	movw	r26, r14
 350:	c6 01       	movw	r24, r12
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	aa 1f       	adc	r26, r26
 358:	bb 1f       	adc	r27, r27
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	aa 1f       	adc	r26, r26
 360:	bb 1f       	adc	r27, r27
 362:	c8 0e       	add	r12, r24
 364:	d9 1e       	adc	r13, r25
 366:	ea 1e       	adc	r14, r26
 368:	fb 1e       	adc	r15, r27
 36a:	c5 01       	movw	r24, r10
 36c:	b4 01       	movw	r22, r8
 36e:	a7 01       	movw	r20, r14
 370:	96 01       	movw	r18, r12
 372:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__divmodsi4>
 376:	2a 30       	cpi	r18, 0x0A	; 10
 378:	31 05       	cpc	r19, r1
 37a:	41 05       	cpc	r20, r1
 37c:	51 05       	cpc	r21, r1
 37e:	1c f7       	brge	.-58     	; 0x346 <lcd_itos+0x4c>
 380:	80 e3       	ldi	r24, 0x30	; 48
 382:	82 0f       	add	r24, r18
 384:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_putc>
 388:	c7 01       	movw	r24, r14
 38a:	b6 01       	movw	r22, r12
 38c:	2a e0       	ldi	r18, 0x0A	; 10
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	40 e0       	ldi	r20, 0x00	; 0
 392:	50 e0       	ldi	r21, 0x00	; 0
 394:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__divmodsi4>
 398:	69 01       	movw	r12, r18
 39a:	7a 01       	movw	r14, r20
 39c:	12 16       	cp	r1, r18
 39e:	13 06       	cpc	r1, r19
 3a0:	14 06       	cpc	r1, r20
 3a2:	15 06       	cpc	r1, r21
 3a4:	dc f5       	brge	.+118    	; 0x41c <lcd_itos+0x122>
 3a6:	0f 2e       	mov	r0, r31
 3a8:	fa e0       	ldi	r31, 0x0A	; 10
 3aa:	4f 2e       	mov	r4, r31
 3ac:	51 2c       	mov	r5, r1
 3ae:	61 2c       	mov	r6, r1
 3b0:	71 2c       	mov	r7, r1
 3b2:	f0 2d       	mov	r31, r0
 3b4:	b7 01       	movw	r22, r14
 3b6:	a6 01       	movw	r20, r12
 3b8:	44 0f       	add	r20, r20
 3ba:	55 1f       	adc	r21, r21
 3bc:	66 1f       	adc	r22, r22
 3be:	77 1f       	adc	r23, r23
 3c0:	db 01       	movw	r26, r22
 3c2:	ca 01       	movw	r24, r20
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	aa 1f       	adc	r26, r26
 3ca:	bb 1f       	adc	r27, r27
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	aa 1f       	adc	r26, r26
 3d2:	bb 1f       	adc	r27, r27
 3d4:	9a 01       	movw	r18, r20
 3d6:	ab 01       	movw	r20, r22
 3d8:	28 0f       	add	r18, r24
 3da:	39 1f       	adc	r19, r25
 3dc:	4a 1f       	adc	r20, r26
 3de:	5b 1f       	adc	r21, r27
 3e0:	c5 01       	movw	r24, r10
 3e2:	b4 01       	movw	r22, r8
 3e4:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__divmodsi4>
 3e8:	a7 01       	movw	r20, r14
 3ea:	96 01       	movw	r18, r12
 3ec:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__divmodsi4>
 3f0:	80 e3       	ldi	r24, 0x30	; 48
 3f2:	82 0f       	add	r24, r18
 3f4:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_putc>
 3f8:	c7 01       	movw	r24, r14
 3fa:	b6 01       	movw	r22, r12
 3fc:	a3 01       	movw	r20, r6
 3fe:	92 01       	movw	r18, r4
 400:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__divmodsi4>
 404:	69 01       	movw	r12, r18
 406:	7a 01       	movw	r14, r20
 408:	12 16       	cp	r1, r18
 40a:	13 06       	cpc	r1, r19
 40c:	14 06       	cpc	r1, r20
 40e:	15 06       	cpc	r1, r21
 410:	8c f2       	brlt	.-94     	; 0x3b4 <lcd_itos+0xba>
 412:	04 c0       	rjmp	.+8      	; 0x41c <lcd_itos+0x122>
 414:	80 e3       	ldi	r24, 0x30	; 48
 416:	88 0d       	add	r24, r8
 418:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_putc>
 41c:	ff 90       	pop	r15
 41e:	ef 90       	pop	r14
 420:	df 90       	pop	r13
 422:	cf 90       	pop	r12
 424:	bf 90       	pop	r11
 426:	af 90       	pop	r10
 428:	9f 90       	pop	r9
 42a:	8f 90       	pop	r8
 42c:	7f 90       	pop	r7
 42e:	6f 90       	pop	r6
 430:	5f 90       	pop	r5
 432:	4f 90       	pop	r4
 434:	08 95       	ret

00000436 <lcd_init>:
 436:	28 98       	cbi	0x05, 0	; 5
 438:	88 e2       	ldi	r24, 0x28	; 40
 43a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_high>
 43e:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_strobe>
 442:	65 e0       	ldi	r22, 0x05	; 5
 444:	70 e0       	ldi	r23, 0x00	; 0
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_10us_delay>
 44e:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_strobe>
 452:	65 e0       	ldi	r22, 0x05	; 5
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_10us_delay>
 45e:	88 e2       	ldi	r24, 0x28	; 40
 460:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_low>
 464:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_strobe>
 468:	65 e0       	ldi	r22, 0x05	; 5
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_10us_delay>
 474:	8c e0       	ldi	r24, 0x0C	; 12
 476:	0e 94 28 01 	call	0x250	; 0x250 <lcd_setmode>
 47a:	86 e0       	ldi	r24, 0x06	; 6
 47c:	0e 94 28 01 	call	0x250	; 0x250 <lcd_setmode>
 480:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_clrscr>
 484:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_return>
 488:	08 95       	ret

0000048a <read_adc>:
	
	
// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input)
{
	ADMUX=adc_input | ADC_VREF_TYPE;
 48a:	80 64       	ori	r24, 0x40	; 64
 48c:	80 93 7c 00 	sts	0x007C, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 490:	85 e3       	ldi	r24, 0x35	; 53
 492:	8a 95       	dec	r24
 494:	f1 f7       	brne	.-4      	; 0x492 <read_adc+0x8>
 496:	00 00       	nop
	// Delay needed for the stabilization of the ADC input voltage
	_delay_us(10);
	// Start the AD conversion
	ADCSRA|=(1<<ADSC);
 498:	ea e7       	ldi	r30, 0x7A	; 122
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	80 81       	ld	r24, Z
 49e:	80 64       	ori	r24, 0x40	; 64
 4a0:	80 83       	st	Z, r24
	// Wait for the AD conversion to complete
	while ((ADCSRA & (1<<ADIF))==0);
 4a2:	80 81       	ld	r24, Z
 4a4:	84 ff       	sbrs	r24, 4
 4a6:	fd cf       	rjmp	.-6      	; 0x4a2 <read_adc+0x18>
	ADCSRA|=(1<<ADIF);
 4a8:	ea e7       	ldi	r30, 0x7A	; 122
 4aa:	f0 e0       	ldi	r31, 0x00	; 0
 4ac:	80 81       	ld	r24, Z
 4ae:	80 61       	ori	r24, 0x10	; 16
 4b0:	80 83       	st	Z, r24
	return ADCW;
 4b2:	80 91 78 00 	lds	r24, 0x0078
 4b6:	90 91 79 00 	lds	r25, 0x0079
}
 4ba:	08 95       	ret

000004bc <__vector_13>:

ISR(TIMER1_OVF_vect)
{
 4bc:	1f 92       	push	r1
 4be:	0f 92       	push	r0
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	0f 92       	push	r0
 4c4:	11 24       	eor	r1, r1
 4c6:	8f 93       	push	r24
	
	// Reinitialize Timer1 value
	TCNT1H=0x63C0 >> 8;
 4c8:	83 e6       	ldi	r24, 0x63	; 99
 4ca:	80 93 85 00 	sts	0x0085, r24
	TCNT1L=0x63C0 & 0xff;
 4ce:	80 ec       	ldi	r24, 0xC0	; 192
 4d0:	80 93 84 00 	sts	0x0084, r24
	// Place your code here
	
}
 4d4:	8f 91       	pop	r24
 4d6:	0f 90       	pop	r0
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	0f 90       	pop	r0
 4dc:	1f 90       	pop	r1
 4de:	18 95       	reti

000004e0 <DrawProgress>:

char move;

void DrawProgress(int value, int maxValue, int chartercount)
{
 4e0:	2f 92       	push	r2
 4e2:	3f 92       	push	r3
 4e4:	4f 92       	push	r4
 4e6:	5f 92       	push	r5
 4e8:	6f 92       	push	r6
 4ea:	7f 92       	push	r7
 4ec:	8f 92       	push	r8
 4ee:	9f 92       	push	r9
 4f0:	af 92       	push	r10
 4f2:	bf 92       	push	r11
 4f4:	cf 92       	push	r12
 4f6:	df 92       	push	r13
 4f8:	ef 92       	push	r14
 4fa:	ff 92       	push	r15
 4fc:	0f 93       	push	r16
 4fe:	1f 93       	push	r17
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	38 2f       	mov	r19, r24
 506:	29 2f       	mov	r18, r25
 508:	fb 01       	movw	r30, r22
 50a:	8a 01       	movw	r16, r20
	int d;
	int dd;
	d = maxValue/(chartercount*5);
 50c:	44 0f       	add	r20, r20
 50e:	55 1f       	adc	r21, r21
 510:	44 0f       	add	r20, r20
 512:	55 1f       	adc	r21, r21
 514:	ba 01       	movw	r22, r20
 516:	60 0f       	add	r22, r16
 518:	71 1f       	adc	r23, r17
 51a:	cf 01       	movw	r24, r30
 51c:	0e 94 6f 05 	call	0xade	; 0xade <__divmodhi4>
 520:	3b 01       	movw	r6, r22
 522:	1b 01       	movw	r2, r22
	dd = maxValue/chartercount;
 524:	cf 01       	movw	r24, r30
 526:	b8 01       	movw	r22, r16
 528:	0e 94 6f 05 	call	0xade	; 0xade <__divmodhi4>
	//lcd_putc('(');
	for (int i = 0; i < chartercount; i++)
 52c:	10 16       	cp	r1, r16
 52e:	11 06       	cpc	r1, r17
 530:	0c f0       	brlt	.+2      	; 0x534 <DrawProgress+0x54>
 532:	43 c0       	rjmp	.+134    	; 0x5ba <DrawProgress+0xda>
	{
		int c = value - i*dd;
		if (c>=d*5) lcd_putc(5);
 534:	53 01       	movw	r10, r6
 536:	aa 0c       	add	r10, r10
 538:	bb 1c       	adc	r11, r11
 53a:	aa 0c       	add	r10, r10
 53c:	bb 1c       	adc	r11, r11
 53e:	65 01       	movw	r12, r10
 540:	c6 0c       	add	r12, r6
 542:	d7 1c       	adc	r13, r7
		else
		if (c>=d*4) lcd_putc(4);
		else		
		if (c>=d*3) lcd_putc(3);
 544:	23 01       	movw	r4, r6
 546:	44 0c       	add	r4, r4
 548:	55 1c       	adc	r5, r5
 54a:	64 0c       	add	r6, r4
 54c:	75 1c       	adc	r7, r5
 54e:	ee 24       	eor	r14, r14
 550:	ff 24       	eor	r15, r15
 552:	e6 1a       	sub	r14, r22
 554:	f7 0a       	sbc	r15, r23
 556:	c3 2f       	mov	r28, r19
 558:	d2 2f       	mov	r29, r18
		else
		if (c>=d*2) lcd_putc(2);
 55a:	81 2c       	mov	r8, r1
 55c:	91 2c       	mov	r9, r1
	dd = maxValue/chartercount;
	//lcd_putc('(');
	for (int i = 0; i < chartercount; i++)
	{
		int c = value - i*dd;
		if (c>=d*5) lcd_putc(5);
 55e:	cc 15       	cp	r28, r12
 560:	dd 05       	cpc	r29, r13
 562:	24 f0       	brlt	.+8      	; 0x56c <DrawProgress+0x8c>
 564:	85 e0       	ldi	r24, 0x05	; 5
 566:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_putc>
 56a:	1f c0       	rjmp	.+62     	; 0x5aa <DrawProgress+0xca>
		else
		if (c>=d*4) lcd_putc(4);
 56c:	ca 15       	cp	r28, r10
 56e:	db 05       	cpc	r29, r11
 570:	24 f0       	brlt	.+8      	; 0x57a <DrawProgress+0x9a>
 572:	84 e0       	ldi	r24, 0x04	; 4
 574:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_putc>
 578:	18 c0       	rjmp	.+48     	; 0x5aa <DrawProgress+0xca>
		else		
		if (c>=d*3) lcd_putc(3);
 57a:	c6 15       	cp	r28, r6
 57c:	d7 05       	cpc	r29, r7
 57e:	24 f0       	brlt	.+8      	; 0x588 <DrawProgress+0xa8>
 580:	83 e0       	ldi	r24, 0x03	; 3
 582:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_putc>
 586:	11 c0       	rjmp	.+34     	; 0x5aa <DrawProgress+0xca>
		else
		if (c>=d*2) lcd_putc(2);
 588:	c4 15       	cp	r28, r4
 58a:	d5 05       	cpc	r29, r5
 58c:	24 f0       	brlt	.+8      	; 0x596 <DrawProgress+0xb6>
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_putc>
 594:	0a c0       	rjmp	.+20     	; 0x5aa <DrawProgress+0xca>
		else
		if (c>=d) lcd_putc(1);
 596:	c2 15       	cp	r28, r2
 598:	d3 05       	cpc	r29, r3
 59a:	24 f0       	brlt	.+8      	; 0x5a4 <DrawProgress+0xc4>
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_putc>
 5a2:	03 c0       	rjmp	.+6      	; 0x5aa <DrawProgress+0xca>
		else
		lcd_putc(0);
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_putc>
	int d;
	int dd;
	d = maxValue/(chartercount*5);
	dd = maxValue/chartercount;
	//lcd_putc('(');
	for (int i = 0; i < chartercount; i++)
 5aa:	8f ef       	ldi	r24, 0xFF	; 255
 5ac:	88 1a       	sub	r8, r24
 5ae:	98 0a       	sbc	r9, r24
 5b0:	ce 0d       	add	r28, r14
 5b2:	df 1d       	adc	r29, r15
 5b4:	80 16       	cp	r8, r16
 5b6:	91 06       	cpc	r9, r17
 5b8:	91 f6       	brne	.-92     	; 0x55e <DrawProgress+0x7e>
		if (c>=d) lcd_putc(1);
		else
		lcd_putc(0);
	}
	//lcd_putc(')');
	move++;
 5ba:	80 91 5c 01 	lds	r24, 0x015C
 5be:	8f 5f       	subi	r24, 0xFF	; 255
 5c0:	80 93 5c 01 	sts	0x015C, r24
	if (move == 1)
 5c4:	81 30       	cpi	r24, 0x01	; 1
 5c6:	31 f4       	brne	.+12     	; 0x5d4 <DrawProgress+0xf4>
	{
		lcd_putc(6);
 5c8:	86 e0       	ldi	r24, 0x06	; 6
 5ca:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_putc>
		lcd_putc(6);
 5ce:	86 e0       	ldi	r24, 0x06	; 6
 5d0:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_putc>
	}
	if (move == 2)
 5d4:	80 91 5c 01 	lds	r24, 0x015C
 5d8:	82 30       	cpi	r24, 0x02	; 2
 5da:	31 f4       	brne	.+12     	; 0x5e8 <DrawProgress+0x108>
	{
			lcd_putc('>');
 5dc:	8e e3       	ldi	r24, 0x3E	; 62
 5de:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_putc>
			lcd_putc('>');
 5e2:	8e e3       	ldi	r24, 0x3E	; 62
 5e4:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_putc>
	}
	if (move == 3)
 5e8:	80 91 5c 01 	lds	r24, 0x015C
 5ec:	83 30       	cpi	r24, 0x03	; 3
 5ee:	41 f4       	brne	.+16     	; 0x600 <DrawProgress+0x120>
	{
		lcd_putc(7);
 5f0:	87 e0       	ldi	r24, 0x07	; 7
 5f2:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_putc>
		lcd_putc(7);
 5f6:	87 e0       	ldi	r24, 0x07	; 7
 5f8:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_putc>
		move = 0;
 5fc:	10 92 5c 01 	sts	0x015C, r1
	}

}
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	1f 91       	pop	r17
 606:	0f 91       	pop	r16
 608:	ff 90       	pop	r15
 60a:	ef 90       	pop	r14
 60c:	df 90       	pop	r13
 60e:	cf 90       	pop	r12
 610:	bf 90       	pop	r11
 612:	af 90       	pop	r10
 614:	9f 90       	pop	r9
 616:	8f 90       	pop	r8
 618:	7f 90       	pop	r7
 61a:	6f 90       	pop	r6
 61c:	5f 90       	pop	r5
 61e:	4f 90       	pop	r4
 620:	3f 90       	pop	r3
 622:	2f 90       	pop	r2
 624:	08 95       	ret

00000626 <main>:
{
	
	// Input/Output Ports initialization
	// Port B initialization
	// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
	DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
 626:	8f e0       	ldi	r24, 0x0F	; 15
 628:	84 b9       	out	0x04, r24	; 4
	// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=0
	PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
 62a:	15 b8       	out	0x05, r1	; 5

	// Port C initialization
	// Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
	DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
 62c:	17 b8       	out	0x07, r1	; 7
	// State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
	PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (1<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
 62e:	84 e0       	ldi	r24, 0x04	; 4
 630:	88 b9       	out	0x08, r24	; 8

	// Port D initialization
	// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
	DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
 632:	88 ef       	ldi	r24, 0xF8	; 248
 634:	8a b9       	out	0x0a, r24	; 10
	// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=T Bit1=T Bit0=T
	PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
 636:	1b b8       	out	0x0b, r1	; 11
	// Clock source: System Clock
	// Clock value: Timer 0 Stopped
	// Mode: Normal top=0xFF
	// OC0A output: Disconnected
	// OC0B output: Disconnected
	TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
 638:	14 bc       	out	0x24, r1	; 36
	TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
 63a:	15 bc       	out	0x25, r1	; 37
	TCNT0=0x00;
 63c:	16 bc       	out	0x26, r1	; 38
	OCR0A=0x00;
 63e:	17 bc       	out	0x27, r1	; 39
	OCR0B=0x00;
 640:	18 bc       	out	0x28, r1	; 40
	// Timer Period: 20 ms
	// Timer1 Overflow Interrupt: On
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
 642:	10 92 80 00 	sts	0x0080, r1
	TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
 646:	82 e0       	ldi	r24, 0x02	; 2
 648:	80 93 81 00 	sts	0x0081, r24
	TCNT1H=0x63;
 64c:	83 e6       	ldi	r24, 0x63	; 99
 64e:	80 93 85 00 	sts	0x0085, r24
	TCNT1L=0xC0;
 652:	80 ec       	ldi	r24, 0xC0	; 192
 654:	80 93 84 00 	sts	0x0084, r24
	ICR1H=0x00;
 658:	10 92 87 00 	sts	0x0087, r1
	ICR1L=0x00;
 65c:	10 92 86 00 	sts	0x0086, r1
	OCR1AH=0x00;
 660:	10 92 89 00 	sts	0x0089, r1
	OCR1AL=0x00;
 664:	10 92 88 00 	sts	0x0088, r1
	OCR1BH=0x00;
 668:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL=0x00;
 66c:	10 92 8a 00 	sts	0x008A, r1
	// OC2A output: Non-Inverted PWM
	// OC2B output: Disconnected
	// Timer Period: 0,512 ms
	// Output Pulse(s):
	// OC2A Period: 0,512 ms Width: 0,512 ms
	ASSR=(0<<EXCLK) | (0<<AS2);
 670:	10 92 b6 00 	sts	0x00B6, r1
	TCCR2A=(1<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (1<<WGM21) | (1<<WGM20);
 674:	83 e8       	ldi	r24, 0x83	; 131
 676:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B=(0<<WGM22) | (0<<CS22) | (1<<CS21) | (1<<CS20);
 67a:	83 e0       	ldi	r24, 0x03	; 3
 67c:	80 93 b1 00 	sts	0x00B1, r24
	TCNT2=0x00;
 680:	10 92 b2 00 	sts	0x00B2, r1
	OCR2A=0xFF;
 684:	8f ef       	ldi	r24, 0xFF	; 255
 686:	80 93 b3 00 	sts	0x00B3, r24
	OCR2B=0x00;
 68a:	10 92 b4 00 	sts	0x00B4, r1

	
	// Timer/Counter 0 Interrupt(s) initialization
	TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
 68e:	10 92 6e 00 	sts	0x006E, r1

	// Timer/Counter 1 Interrupt(s) initialization
	TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (1<<TOIE1);
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	80 93 6f 00 	sts	0x006F, r24

	// Timer/Counter 2 Interrupt(s) initialization
	TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
 698:	10 92 70 00 	sts	0x0070, r1
	// ADC Clock frequency: 1000,000 kHz
	// ADC Voltage Reference: AVCC pin
	// ADC Auto Trigger Source: ADC Stopped
	// Digital input buffers on ADC0: Off, ADC1: Off, ADC2: Off, ADC3: On
	// ADC4: Off, ADC5: Off
	DIDR0=(1<<ADC5D) | (1<<ADC4D) | (0<<ADC3D) | (1<<ADC2D) | (1<<ADC1D) | (1<<ADC0D);
 69c:	87 e3       	ldi	r24, 0x37	; 55
 69e:	80 93 7e 00 	sts	0x007E, r24
	ADMUX=ADC_VREF_TYPE;
 6a2:	80 e4       	ldi	r24, 0x40	; 64
 6a4:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
 6a8:	84 e8       	ldi	r24, 0x84	; 132
 6aa:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
 6ae:	10 92 7b 00 	sts	0x007B, r1
	
	
	lcd_init();
 6b2:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_init>
	lcd_loadchar(bar0, 0);
 6b6:	60 e0       	ldi	r22, 0x00	; 0
 6b8:	88 e3       	ldi	r24, 0x38	; 56
 6ba:	91 e0       	ldi	r25, 0x01	; 1
 6bc:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_loadchar>
	lcd_loadchar(bar1, 1);
 6c0:	61 e0       	ldi	r22, 0x01	; 1
 6c2:	80 e3       	ldi	r24, 0x30	; 48
 6c4:	91 e0       	ldi	r25, 0x01	; 1
 6c6:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_loadchar>
	lcd_loadchar(bar2, 2);
 6ca:	62 e0       	ldi	r22, 0x02	; 2
 6cc:	88 e2       	ldi	r24, 0x28	; 40
 6ce:	91 e0       	ldi	r25, 0x01	; 1
 6d0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_loadchar>
	lcd_loadchar(bar3, 3);
 6d4:	63 e0       	ldi	r22, 0x03	; 3
 6d6:	80 e2       	ldi	r24, 0x20	; 32
 6d8:	91 e0       	ldi	r25, 0x01	; 1
 6da:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_loadchar>
	lcd_loadchar(bar4, 4);
 6de:	64 e0       	ldi	r22, 0x04	; 4
 6e0:	88 e1       	ldi	r24, 0x18	; 24
 6e2:	91 e0       	ldi	r25, 0x01	; 1
 6e4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_loadchar>
	lcd_loadchar(bar5, 5);
 6e8:	65 e0       	ldi	r22, 0x05	; 5
 6ea:	80 e1       	ldi	r24, 0x10	; 16
 6ec:	91 e0       	ldi	r25, 0x01	; 1
 6ee:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_loadchar>
	lcd_loadchar(barS, 6);
 6f2:	66 e0       	ldi	r22, 0x06	; 6
 6f4:	88 e0       	ldi	r24, 0x08	; 8
 6f6:	91 e0       	ldi	r25, 0x01	; 1
 6f8:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_loadchar>
	lcd_loadchar(barF, 7);
 6fc:	67 e0       	ldi	r22, 0x07	; 7
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	91 e0       	ldi	r25, 0x01	; 1
 702:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_loadchar>
	
	sei();
 706:	78 94       	sei
		{
			if (Gerkon_mode > -GERKON_TIMING) Gerkon_mode--;
		}
		
		if HEATER_SLEEP 
			NeedFanTemperature = SLEEP_FAN_TEMPERATURE;
 708:	02 e3       	ldi	r16, 0x32	; 50
 70a:	10 e0       	ldi	r17, 0x00	; 0
			SetBit(PORTB, PORTB2);
		else
			ClearBit(PORTB, PORTB2);
		
		test = UserFanSpeed/4;
		if (OCR2A != test)
 70c:	c3 eb       	ldi	r28, 0xB3	; 179
 70e:	d0 e0       	ldi	r29, 0x00	; 0
	sei();
	
    /* Replace with your application code */
    while (1) 
    {
		UserFanSpeed = read_adc(1);
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	0e 94 45 02 	call	0x48a	; 0x48a <read_adc>
 716:	90 93 5e 01 	sts	0x015E, r25
 71a:	80 93 5d 01 	sts	0x015D, r24
		UserFanTemperature = read_adc(0);
 71e:	80 e0       	ldi	r24, 0x00	; 0
 720:	0e 94 45 02 	call	0x48a	; 0x48a <read_adc>
 724:	90 93 5b 01 	sts	0x015B, r25
 728:	80 93 5a 01 	sts	0x015A, r24
		CurrenFanTemperature = read_adc(4);
 72c:	84 e0       	ldi	r24, 0x04	; 4
 72e:	0e 94 45 02 	call	0x48a	; 0x48a <read_adc>
 732:	90 93 57 01 	sts	0x0157, r25
 736:	80 93 56 01 	sts	0x0156, r24
		
		if (BitIsClear(PIND, PIND2))
 73a:	4a 99       	sbic	0x09, 2	; 9
 73c:	0e c0       	rjmp	.+28     	; 0x75a <main+0x134>
		{
			if (Gerkon_mode < GERKON_TIMING) Gerkon_mode++;
 73e:	20 91 52 01 	lds	r18, 0x0152
 742:	30 91 53 01 	lds	r19, 0x0153
 746:	25 30       	cpi	r18, 0x05	; 5
 748:	31 05       	cpc	r19, r1
 74a:	ac f4       	brge	.+42     	; 0x776 <main+0x150>
 74c:	2f 5f       	subi	r18, 0xFF	; 255
 74e:	3f 4f       	sbci	r19, 0xFF	; 255
 750:	30 93 53 01 	sts	0x0153, r19
 754:	20 93 52 01 	sts	0x0152, r18
 758:	0e c0       	rjmp	.+28     	; 0x776 <main+0x150>
		}
		else
		{
			if (Gerkon_mode > -GERKON_TIMING) Gerkon_mode--;
 75a:	20 91 52 01 	lds	r18, 0x0152
 75e:	30 91 53 01 	lds	r19, 0x0153
 762:	2c 3f       	cpi	r18, 0xFC	; 252
 764:	4f ef       	ldi	r20, 0xFF	; 255
 766:	34 07       	cpc	r19, r20
 768:	34 f0       	brlt	.+12     	; 0x776 <main+0x150>
 76a:	21 50       	subi	r18, 0x01	; 1
 76c:	31 09       	sbc	r19, r1
 76e:	30 93 53 01 	sts	0x0153, r19
 772:	20 93 52 01 	sts	0x0152, r18
		}
		
		if HEATER_SLEEP 
 776:	20 91 52 01 	lds	r18, 0x0152
 77a:	30 91 53 01 	lds	r19, 0x0153
 77e:	12 16       	cp	r1, r18
 780:	13 06       	cpc	r1, r19
 782:	2c f4       	brge	.+10     	; 0x78e <main+0x168>
			NeedFanTemperature = SLEEP_FAN_TEMPERATURE;
 784:	10 93 59 01 	sts	0x0159, r17
 788:	00 93 58 01 	sts	0x0158, r16
 78c:	08 c0       	rjmp	.+16     	; 0x79e <main+0x178>
		else 
			NeedFanTemperature = UserFanTemperature;
 78e:	20 91 5a 01 	lds	r18, 0x015A
 792:	30 91 5b 01 	lds	r19, 0x015B
 796:	30 93 59 01 	sts	0x0159, r19
 79a:	20 93 58 01 	sts	0x0158, r18
		
			
		if (CurrenFanTemperature < NeedFanTemperature)
 79e:	20 91 58 01 	lds	r18, 0x0158
 7a2:	30 91 59 01 	lds	r19, 0x0159
 7a6:	82 17       	cp	r24, r18
 7a8:	93 07       	cpc	r25, r19
 7aa:	14 f4       	brge	.+4      	; 0x7b0 <main+0x18a>
			SetBit(PORTB, PORTB2);
 7ac:	2a 9a       	sbi	0x05, 2	; 5
 7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <main+0x18c>
		else
			ClearBit(PORTB, PORTB2);
 7b0:	2a 98       	cbi	0x05, 2	; 5
		
		test = UserFanSpeed/4;
 7b2:	80 91 5d 01 	lds	r24, 0x015D
 7b6:	90 91 5e 01 	lds	r25, 0x015E
 7ba:	99 23       	and	r25, r25
 7bc:	0c f4       	brge	.+2      	; 0x7c0 <main+0x19a>
 7be:	03 96       	adiw	r24, 0x03	; 3
 7c0:	95 95       	asr	r25
 7c2:	87 95       	ror	r24
 7c4:	95 95       	asr	r25
 7c6:	87 95       	ror	r24
 7c8:	90 93 55 01 	sts	0x0155, r25
 7cc:	80 93 54 01 	sts	0x0154, r24
		if (OCR2A != test)
 7d0:	28 81       	ld	r18, Y
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	82 17       	cp	r24, r18
 7d6:	93 07       	cpc	r25, r19
 7d8:	09 f0       	breq	.+2      	; 0x7dc <main+0x1b6>
		OCR2A = test;
 7da:	88 83       	st	Y, r24
		
		lcd_goto(LCD_1st_LINE,0);
 7dc:	60 e0       	ldi	r22, 0x00	; 0
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	0e 94 01 01 	call	0x202	; 0x202 <lcd_goto>
		lcd_itos(UserFanTemperature);
 7e4:	60 91 5a 01 	lds	r22, 0x015A
 7e8:	70 91 5b 01 	lds	r23, 0x015B
 7ec:	07 2e       	mov	r0, r23
 7ee:	00 0c       	add	r0, r0
 7f0:	88 0b       	sbc	r24, r24
 7f2:	99 0b       	sbc	r25, r25
 7f4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd_itos>
		lcd_puts("C   Real:");
 7f8:	80 e4       	ldi	r24, 0x40	; 64
 7fa:	91 e0       	ldi	r25, 0x01	; 1
 7fc:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_puts>
		lcd_itos(CurrenFanTemperature);
 800:	60 91 56 01 	lds	r22, 0x0156
 804:	70 91 57 01 	lds	r23, 0x0157
 808:	07 2e       	mov	r0, r23
 80a:	00 0c       	add	r0, r0
 80c:	88 0b       	sbc	r24, r24
 80e:	99 0b       	sbc	r25, r25
 810:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd_itos>
		lcd_puts("C  ");
 814:	8a e4       	ldi	r24, 0x4A	; 74
 816:	91 e0       	ldi	r25, 0x01	; 1
 818:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_puts>
		
		lcd_goto(LCD_2nd_LINE,0);
 81c:	60 e0       	ldi	r22, 0x00	; 0
 81e:	82 e0       	ldi	r24, 0x02	; 2
 820:	0e 94 01 01 	call	0x202	; 0x202 <lcd_goto>
		lcd_itos(UserFanSpeed/10.24);
 824:	60 91 5d 01 	lds	r22, 0x015D
 828:	70 91 5e 01 	lds	r23, 0x015E
 82c:	07 2e       	mov	r0, r23
 82e:	00 0c       	add	r0, r0
 830:	88 0b       	sbc	r24, r24
 832:	99 0b       	sbc	r25, r25
 834:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__floatsisf>
 838:	2a e0       	ldi	r18, 0x0A	; 10
 83a:	37 ed       	ldi	r19, 0xD7	; 215
 83c:	43 e2       	ldi	r20, 0x23	; 35
 83e:	51 e4       	ldi	r21, 0x41	; 65
 840:	0e 94 39 04 	call	0x872	; 0x872 <__divsf3>
 844:	0e 94 ab 04 	call	0x956	; 0x956 <__fixsfsi>
 848:	0e 94 7d 01 	call	0x2fa	; 0x2fa <lcd_itos>
		lcd_puts("% ");
 84c:	8e e4       	ldi	r24, 0x4E	; 78
 84e:	91 e0       	ldi	r25, 0x01	; 1
 850:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_puts>
		lcd_goto(LCD_2nd_LINE,4);
 854:	64 e0       	ldi	r22, 0x04	; 4
 856:	82 e0       	ldi	r24, 0x02	; 2
 858:	0e 94 01 01 	call	0x202	; 0x202 <lcd_goto>
		DrawProgress(test, 256, 10);
 85c:	4a e0       	ldi	r20, 0x0A	; 10
 85e:	50 e0       	ldi	r21, 0x00	; 0
 860:	60 e0       	ldi	r22, 0x00	; 0
 862:	71 e0       	ldi	r23, 0x01	; 1
 864:	80 91 54 01 	lds	r24, 0x0154
 868:	90 91 55 01 	lds	r25, 0x0155
 86c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <DrawProgress>
		
    }
 870:	4f cf       	rjmp	.-354    	; 0x710 <main+0xea>

00000872 <__divsf3>:
 872:	0e 94 4d 04 	call	0x89a	; 0x89a <__divsf3x>
 876:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__fp_round>
 87a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_pscB>
 87e:	58 f0       	brcs	.+22     	; 0x896 <__divsf3+0x24>
 880:	0e 94 27 05 	call	0xa4e	; 0xa4e <__fp_pscA>
 884:	40 f0       	brcs	.+16     	; 0x896 <__divsf3+0x24>
 886:	29 f4       	brne	.+10     	; 0x892 <__divsf3+0x20>
 888:	5f 3f       	cpi	r21, 0xFF	; 255
 88a:	29 f0       	breq	.+10     	; 0x896 <__divsf3+0x24>
 88c:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_inf>
 890:	51 11       	cpse	r21, r1
 892:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_szero>
 896:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__fp_nan>

0000089a <__divsf3x>:
 89a:	0e 94 46 05 	call	0xa8c	; 0xa8c <__fp_split3>
 89e:	68 f3       	brcs	.-38     	; 0x87a <__divsf3+0x8>

000008a0 <__divsf3_pse>:
 8a0:	99 23       	and	r25, r25
 8a2:	b1 f3       	breq	.-20     	; 0x890 <__divsf3+0x1e>
 8a4:	55 23       	and	r21, r21
 8a6:	91 f3       	breq	.-28     	; 0x88c <__divsf3+0x1a>
 8a8:	95 1b       	sub	r25, r21
 8aa:	55 0b       	sbc	r21, r21
 8ac:	bb 27       	eor	r27, r27
 8ae:	aa 27       	eor	r26, r26
 8b0:	62 17       	cp	r22, r18
 8b2:	73 07       	cpc	r23, r19
 8b4:	84 07       	cpc	r24, r20
 8b6:	38 f0       	brcs	.+14     	; 0x8c6 <__divsf3_pse+0x26>
 8b8:	9f 5f       	subi	r25, 0xFF	; 255
 8ba:	5f 4f       	sbci	r21, 0xFF	; 255
 8bc:	22 0f       	add	r18, r18
 8be:	33 1f       	adc	r19, r19
 8c0:	44 1f       	adc	r20, r20
 8c2:	aa 1f       	adc	r26, r26
 8c4:	a9 f3       	breq	.-22     	; 0x8b0 <__divsf3_pse+0x10>
 8c6:	35 d0       	rcall	.+106    	; 0x932 <__stack+0x33>
 8c8:	0e 2e       	mov	r0, r30
 8ca:	3a f0       	brmi	.+14     	; 0x8da <__divsf3_pse+0x3a>
 8cc:	e0 e8       	ldi	r30, 0x80	; 128
 8ce:	32 d0       	rcall	.+100    	; 0x934 <__stack+0x35>
 8d0:	91 50       	subi	r25, 0x01	; 1
 8d2:	50 40       	sbci	r21, 0x00	; 0
 8d4:	e6 95       	lsr	r30
 8d6:	00 1c       	adc	r0, r0
 8d8:	ca f7       	brpl	.-14     	; 0x8cc <__divsf3_pse+0x2c>
 8da:	2b d0       	rcall	.+86     	; 0x932 <__stack+0x33>
 8dc:	fe 2f       	mov	r31, r30
 8de:	29 d0       	rcall	.+82     	; 0x932 <__stack+0x33>
 8e0:	66 0f       	add	r22, r22
 8e2:	77 1f       	adc	r23, r23
 8e4:	88 1f       	adc	r24, r24
 8e6:	bb 1f       	adc	r27, r27
 8e8:	26 17       	cp	r18, r22
 8ea:	37 07       	cpc	r19, r23
 8ec:	48 07       	cpc	r20, r24
 8ee:	ab 07       	cpc	r26, r27
 8f0:	b0 e8       	ldi	r27, 0x80	; 128
 8f2:	09 f0       	breq	.+2      	; 0x8f6 <__divsf3_pse+0x56>
 8f4:	bb 0b       	sbc	r27, r27
 8f6:	80 2d       	mov	r24, r0
 8f8:	bf 01       	movw	r22, r30
 8fa:	ff 27       	eor	r31, r31
 8fc:	93 58       	subi	r25, 0x83	; 131
 8fe:	5f 4f       	sbci	r21, 0xFF	; 255
 900:	3a f0       	brmi	.+14     	; 0x910 <__stack+0x11>
 902:	9e 3f       	cpi	r25, 0xFE	; 254
 904:	51 05       	cpc	r21, r1
 906:	78 f0       	brcs	.+30     	; 0x926 <__stack+0x27>
 908:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <__fp_inf>
 90c:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_szero>
 910:	5f 3f       	cpi	r21, 0xFF	; 255
 912:	e4 f3       	brlt	.-8      	; 0x90c <__stack+0xd>
 914:	98 3e       	cpi	r25, 0xE8	; 232
 916:	d4 f3       	brlt	.-12     	; 0x90c <__stack+0xd>
 918:	86 95       	lsr	r24
 91a:	77 95       	ror	r23
 91c:	67 95       	ror	r22
 91e:	b7 95       	ror	r27
 920:	f7 95       	ror	r31
 922:	9f 5f       	subi	r25, 0xFF	; 255
 924:	c9 f7       	brne	.-14     	; 0x918 <__stack+0x19>
 926:	88 0f       	add	r24, r24
 928:	91 1d       	adc	r25, r1
 92a:	96 95       	lsr	r25
 92c:	87 95       	ror	r24
 92e:	97 f9       	bld	r25, 7
 930:	08 95       	ret
 932:	e1 e0       	ldi	r30, 0x01	; 1
 934:	66 0f       	add	r22, r22
 936:	77 1f       	adc	r23, r23
 938:	88 1f       	adc	r24, r24
 93a:	bb 1f       	adc	r27, r27
 93c:	62 17       	cp	r22, r18
 93e:	73 07       	cpc	r23, r19
 940:	84 07       	cpc	r24, r20
 942:	ba 07       	cpc	r27, r26
 944:	20 f0       	brcs	.+8      	; 0x94e <__stack+0x4f>
 946:	62 1b       	sub	r22, r18
 948:	73 0b       	sbc	r23, r19
 94a:	84 0b       	sbc	r24, r20
 94c:	ba 0b       	sbc	r27, r26
 94e:	ee 1f       	adc	r30, r30
 950:	88 f7       	brcc	.-30     	; 0x934 <__stack+0x35>
 952:	e0 95       	com	r30
 954:	08 95       	ret

00000956 <__fixsfsi>:
 956:	0e 94 b2 04 	call	0x964	; 0x964 <__fixunssfsi>
 95a:	68 94       	set
 95c:	b1 11       	cpse	r27, r1
 95e:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__fp_szero>
 962:	08 95       	ret

00000964 <__fixunssfsi>:
 964:	0e 94 4e 05 	call	0xa9c	; 0xa9c <__fp_splitA>
 968:	88 f0       	brcs	.+34     	; 0x98c <__fixunssfsi+0x28>
 96a:	9f 57       	subi	r25, 0x7F	; 127
 96c:	98 f0       	brcs	.+38     	; 0x994 <__fixunssfsi+0x30>
 96e:	b9 2f       	mov	r27, r25
 970:	99 27       	eor	r25, r25
 972:	b7 51       	subi	r27, 0x17	; 23
 974:	b0 f0       	brcs	.+44     	; 0x9a2 <__fixunssfsi+0x3e>
 976:	e1 f0       	breq	.+56     	; 0x9b0 <__fixunssfsi+0x4c>
 978:	66 0f       	add	r22, r22
 97a:	77 1f       	adc	r23, r23
 97c:	88 1f       	adc	r24, r24
 97e:	99 1f       	adc	r25, r25
 980:	1a f0       	brmi	.+6      	; 0x988 <__fixunssfsi+0x24>
 982:	ba 95       	dec	r27
 984:	c9 f7       	brne	.-14     	; 0x978 <__fixunssfsi+0x14>
 986:	14 c0       	rjmp	.+40     	; 0x9b0 <__fixunssfsi+0x4c>
 988:	b1 30       	cpi	r27, 0x01	; 1
 98a:	91 f0       	breq	.+36     	; 0x9b0 <__fixunssfsi+0x4c>
 98c:	0e 94 68 05 	call	0xad0	; 0xad0 <__fp_zero>
 990:	b1 e0       	ldi	r27, 0x01	; 1
 992:	08 95       	ret
 994:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_zero>
 998:	67 2f       	mov	r22, r23
 99a:	78 2f       	mov	r23, r24
 99c:	88 27       	eor	r24, r24
 99e:	b8 5f       	subi	r27, 0xF8	; 248
 9a0:	39 f0       	breq	.+14     	; 0x9b0 <__fixunssfsi+0x4c>
 9a2:	b9 3f       	cpi	r27, 0xF9	; 249
 9a4:	cc f3       	brlt	.-14     	; 0x998 <__fixunssfsi+0x34>
 9a6:	86 95       	lsr	r24
 9a8:	77 95       	ror	r23
 9aa:	67 95       	ror	r22
 9ac:	b3 95       	inc	r27
 9ae:	d9 f7       	brne	.-10     	; 0x9a6 <__fixunssfsi+0x42>
 9b0:	3e f4       	brtc	.+14     	; 0x9c0 <__fixunssfsi+0x5c>
 9b2:	90 95       	com	r25
 9b4:	80 95       	com	r24
 9b6:	70 95       	com	r23
 9b8:	61 95       	neg	r22
 9ba:	7f 4f       	sbci	r23, 0xFF	; 255
 9bc:	8f 4f       	sbci	r24, 0xFF	; 255
 9be:	9f 4f       	sbci	r25, 0xFF	; 255
 9c0:	08 95       	ret

000009c2 <__floatunsisf>:
 9c2:	e8 94       	clt
 9c4:	09 c0       	rjmp	.+18     	; 0x9d8 <__floatsisf+0x12>

000009c6 <__floatsisf>:
 9c6:	97 fb       	bst	r25, 7
 9c8:	3e f4       	brtc	.+14     	; 0x9d8 <__floatsisf+0x12>
 9ca:	90 95       	com	r25
 9cc:	80 95       	com	r24
 9ce:	70 95       	com	r23
 9d0:	61 95       	neg	r22
 9d2:	7f 4f       	sbci	r23, 0xFF	; 255
 9d4:	8f 4f       	sbci	r24, 0xFF	; 255
 9d6:	9f 4f       	sbci	r25, 0xFF	; 255
 9d8:	99 23       	and	r25, r25
 9da:	a9 f0       	breq	.+42     	; 0xa06 <__floatsisf+0x40>
 9dc:	f9 2f       	mov	r31, r25
 9de:	96 e9       	ldi	r25, 0x96	; 150
 9e0:	bb 27       	eor	r27, r27
 9e2:	93 95       	inc	r25
 9e4:	f6 95       	lsr	r31
 9e6:	87 95       	ror	r24
 9e8:	77 95       	ror	r23
 9ea:	67 95       	ror	r22
 9ec:	b7 95       	ror	r27
 9ee:	f1 11       	cpse	r31, r1
 9f0:	f8 cf       	rjmp	.-16     	; 0x9e2 <__floatsisf+0x1c>
 9f2:	fa f4       	brpl	.+62     	; 0xa32 <__floatsisf+0x6c>
 9f4:	bb 0f       	add	r27, r27
 9f6:	11 f4       	brne	.+4      	; 0x9fc <__floatsisf+0x36>
 9f8:	60 ff       	sbrs	r22, 0
 9fa:	1b c0       	rjmp	.+54     	; 0xa32 <__floatsisf+0x6c>
 9fc:	6f 5f       	subi	r22, 0xFF	; 255
 9fe:	7f 4f       	sbci	r23, 0xFF	; 255
 a00:	8f 4f       	sbci	r24, 0xFF	; 255
 a02:	9f 4f       	sbci	r25, 0xFF	; 255
 a04:	16 c0       	rjmp	.+44     	; 0xa32 <__floatsisf+0x6c>
 a06:	88 23       	and	r24, r24
 a08:	11 f0       	breq	.+4      	; 0xa0e <__floatsisf+0x48>
 a0a:	96 e9       	ldi	r25, 0x96	; 150
 a0c:	11 c0       	rjmp	.+34     	; 0xa30 <__floatsisf+0x6a>
 a0e:	77 23       	and	r23, r23
 a10:	21 f0       	breq	.+8      	; 0xa1a <__floatsisf+0x54>
 a12:	9e e8       	ldi	r25, 0x8E	; 142
 a14:	87 2f       	mov	r24, r23
 a16:	76 2f       	mov	r23, r22
 a18:	05 c0       	rjmp	.+10     	; 0xa24 <__floatsisf+0x5e>
 a1a:	66 23       	and	r22, r22
 a1c:	71 f0       	breq	.+28     	; 0xa3a <__floatsisf+0x74>
 a1e:	96 e8       	ldi	r25, 0x86	; 134
 a20:	86 2f       	mov	r24, r22
 a22:	70 e0       	ldi	r23, 0x00	; 0
 a24:	60 e0       	ldi	r22, 0x00	; 0
 a26:	2a f0       	brmi	.+10     	; 0xa32 <__floatsisf+0x6c>
 a28:	9a 95       	dec	r25
 a2a:	66 0f       	add	r22, r22
 a2c:	77 1f       	adc	r23, r23
 a2e:	88 1f       	adc	r24, r24
 a30:	da f7       	brpl	.-10     	; 0xa28 <__floatsisf+0x62>
 a32:	88 0f       	add	r24, r24
 a34:	96 95       	lsr	r25
 a36:	87 95       	ror	r24
 a38:	97 f9       	bld	r25, 7
 a3a:	08 95       	ret

00000a3c <__fp_inf>:
 a3c:	97 f9       	bld	r25, 7
 a3e:	9f 67       	ori	r25, 0x7F	; 127
 a40:	80 e8       	ldi	r24, 0x80	; 128
 a42:	70 e0       	ldi	r23, 0x00	; 0
 a44:	60 e0       	ldi	r22, 0x00	; 0
 a46:	08 95       	ret

00000a48 <__fp_nan>:
 a48:	9f ef       	ldi	r25, 0xFF	; 255
 a4a:	80 ec       	ldi	r24, 0xC0	; 192
 a4c:	08 95       	ret

00000a4e <__fp_pscA>:
 a4e:	00 24       	eor	r0, r0
 a50:	0a 94       	dec	r0
 a52:	16 16       	cp	r1, r22
 a54:	17 06       	cpc	r1, r23
 a56:	18 06       	cpc	r1, r24
 a58:	09 06       	cpc	r0, r25
 a5a:	08 95       	ret

00000a5c <__fp_pscB>:
 a5c:	00 24       	eor	r0, r0
 a5e:	0a 94       	dec	r0
 a60:	12 16       	cp	r1, r18
 a62:	13 06       	cpc	r1, r19
 a64:	14 06       	cpc	r1, r20
 a66:	05 06       	cpc	r0, r21
 a68:	08 95       	ret

00000a6a <__fp_round>:
 a6a:	09 2e       	mov	r0, r25
 a6c:	03 94       	inc	r0
 a6e:	00 0c       	add	r0, r0
 a70:	11 f4       	brne	.+4      	; 0xa76 <__fp_round+0xc>
 a72:	88 23       	and	r24, r24
 a74:	52 f0       	brmi	.+20     	; 0xa8a <__fp_round+0x20>
 a76:	bb 0f       	add	r27, r27
 a78:	40 f4       	brcc	.+16     	; 0xa8a <__fp_round+0x20>
 a7a:	bf 2b       	or	r27, r31
 a7c:	11 f4       	brne	.+4      	; 0xa82 <__fp_round+0x18>
 a7e:	60 ff       	sbrs	r22, 0
 a80:	04 c0       	rjmp	.+8      	; 0xa8a <__fp_round+0x20>
 a82:	6f 5f       	subi	r22, 0xFF	; 255
 a84:	7f 4f       	sbci	r23, 0xFF	; 255
 a86:	8f 4f       	sbci	r24, 0xFF	; 255
 a88:	9f 4f       	sbci	r25, 0xFF	; 255
 a8a:	08 95       	ret

00000a8c <__fp_split3>:
 a8c:	57 fd       	sbrc	r21, 7
 a8e:	90 58       	subi	r25, 0x80	; 128
 a90:	44 0f       	add	r20, r20
 a92:	55 1f       	adc	r21, r21
 a94:	59 f0       	breq	.+22     	; 0xaac <__fp_splitA+0x10>
 a96:	5f 3f       	cpi	r21, 0xFF	; 255
 a98:	71 f0       	breq	.+28     	; 0xab6 <__fp_splitA+0x1a>
 a9a:	47 95       	ror	r20

00000a9c <__fp_splitA>:
 a9c:	88 0f       	add	r24, r24
 a9e:	97 fb       	bst	r25, 7
 aa0:	99 1f       	adc	r25, r25
 aa2:	61 f0       	breq	.+24     	; 0xabc <__fp_splitA+0x20>
 aa4:	9f 3f       	cpi	r25, 0xFF	; 255
 aa6:	79 f0       	breq	.+30     	; 0xac6 <__fp_splitA+0x2a>
 aa8:	87 95       	ror	r24
 aaa:	08 95       	ret
 aac:	12 16       	cp	r1, r18
 aae:	13 06       	cpc	r1, r19
 ab0:	14 06       	cpc	r1, r20
 ab2:	55 1f       	adc	r21, r21
 ab4:	f2 cf       	rjmp	.-28     	; 0xa9a <__fp_split3+0xe>
 ab6:	46 95       	lsr	r20
 ab8:	f1 df       	rcall	.-30     	; 0xa9c <__fp_splitA>
 aba:	08 c0       	rjmp	.+16     	; 0xacc <__fp_splitA+0x30>
 abc:	16 16       	cp	r1, r22
 abe:	17 06       	cpc	r1, r23
 ac0:	18 06       	cpc	r1, r24
 ac2:	99 1f       	adc	r25, r25
 ac4:	f1 cf       	rjmp	.-30     	; 0xaa8 <__fp_splitA+0xc>
 ac6:	86 95       	lsr	r24
 ac8:	71 05       	cpc	r23, r1
 aca:	61 05       	cpc	r22, r1
 acc:	08 94       	sec
 ace:	08 95       	ret

00000ad0 <__fp_zero>:
 ad0:	e8 94       	clt

00000ad2 <__fp_szero>:
 ad2:	bb 27       	eor	r27, r27
 ad4:	66 27       	eor	r22, r22
 ad6:	77 27       	eor	r23, r23
 ad8:	cb 01       	movw	r24, r22
 ada:	97 f9       	bld	r25, 7
 adc:	08 95       	ret

00000ade <__divmodhi4>:
 ade:	97 fb       	bst	r25, 7
 ae0:	07 2e       	mov	r0, r23
 ae2:	16 f4       	brtc	.+4      	; 0xae8 <__divmodhi4+0xa>
 ae4:	00 94       	com	r0
 ae6:	07 d0       	rcall	.+14     	; 0xaf6 <__divmodhi4_neg1>
 ae8:	77 fd       	sbrc	r23, 7
 aea:	09 d0       	rcall	.+18     	; 0xafe <__divmodhi4_neg2>
 aec:	0e 94 c4 05 	call	0xb88	; 0xb88 <__udivmodhi4>
 af0:	07 fc       	sbrc	r0, 7
 af2:	05 d0       	rcall	.+10     	; 0xafe <__divmodhi4_neg2>
 af4:	3e f4       	brtc	.+14     	; 0xb04 <__divmodhi4_exit>

00000af6 <__divmodhi4_neg1>:
 af6:	90 95       	com	r25
 af8:	81 95       	neg	r24
 afa:	9f 4f       	sbci	r25, 0xFF	; 255
 afc:	08 95       	ret

00000afe <__divmodhi4_neg2>:
 afe:	70 95       	com	r23
 b00:	61 95       	neg	r22
 b02:	7f 4f       	sbci	r23, 0xFF	; 255

00000b04 <__divmodhi4_exit>:
 b04:	08 95       	ret

00000b06 <__udivmodsi4>:
 b06:	a1 e2       	ldi	r26, 0x21	; 33
 b08:	1a 2e       	mov	r1, r26
 b0a:	aa 1b       	sub	r26, r26
 b0c:	bb 1b       	sub	r27, r27
 b0e:	fd 01       	movw	r30, r26
 b10:	0d c0       	rjmp	.+26     	; 0xb2c <__udivmodsi4_ep>

00000b12 <__udivmodsi4_loop>:
 b12:	aa 1f       	adc	r26, r26
 b14:	bb 1f       	adc	r27, r27
 b16:	ee 1f       	adc	r30, r30
 b18:	ff 1f       	adc	r31, r31
 b1a:	a2 17       	cp	r26, r18
 b1c:	b3 07       	cpc	r27, r19
 b1e:	e4 07       	cpc	r30, r20
 b20:	f5 07       	cpc	r31, r21
 b22:	20 f0       	brcs	.+8      	; 0xb2c <__udivmodsi4_ep>
 b24:	a2 1b       	sub	r26, r18
 b26:	b3 0b       	sbc	r27, r19
 b28:	e4 0b       	sbc	r30, r20
 b2a:	f5 0b       	sbc	r31, r21

00000b2c <__udivmodsi4_ep>:
 b2c:	66 1f       	adc	r22, r22
 b2e:	77 1f       	adc	r23, r23
 b30:	88 1f       	adc	r24, r24
 b32:	99 1f       	adc	r25, r25
 b34:	1a 94       	dec	r1
 b36:	69 f7       	brne	.-38     	; 0xb12 <__udivmodsi4_loop>
 b38:	60 95       	com	r22
 b3a:	70 95       	com	r23
 b3c:	80 95       	com	r24
 b3e:	90 95       	com	r25
 b40:	9b 01       	movw	r18, r22
 b42:	ac 01       	movw	r20, r24
 b44:	bd 01       	movw	r22, r26
 b46:	cf 01       	movw	r24, r30
 b48:	08 95       	ret

00000b4a <__divmodsi4>:
 b4a:	05 2e       	mov	r0, r21
 b4c:	97 fb       	bst	r25, 7
 b4e:	1e f4       	brtc	.+6      	; 0xb56 <__divmodsi4+0xc>
 b50:	00 94       	com	r0
 b52:	0e 94 bc 05 	call	0xb78	; 0xb78 <__negsi2>
 b56:	57 fd       	sbrc	r21, 7
 b58:	07 d0       	rcall	.+14     	; 0xb68 <__divmodsi4_neg2>
 b5a:	0e 94 83 05 	call	0xb06	; 0xb06 <__udivmodsi4>
 b5e:	07 fc       	sbrc	r0, 7
 b60:	03 d0       	rcall	.+6      	; 0xb68 <__divmodsi4_neg2>
 b62:	4e f4       	brtc	.+18     	; 0xb76 <__divmodsi4_exit>
 b64:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__negsi2>

00000b68 <__divmodsi4_neg2>:
 b68:	50 95       	com	r21
 b6a:	40 95       	com	r20
 b6c:	30 95       	com	r19
 b6e:	21 95       	neg	r18
 b70:	3f 4f       	sbci	r19, 0xFF	; 255
 b72:	4f 4f       	sbci	r20, 0xFF	; 255
 b74:	5f 4f       	sbci	r21, 0xFF	; 255

00000b76 <__divmodsi4_exit>:
 b76:	08 95       	ret

00000b78 <__negsi2>:
 b78:	90 95       	com	r25
 b7a:	80 95       	com	r24
 b7c:	70 95       	com	r23
 b7e:	61 95       	neg	r22
 b80:	7f 4f       	sbci	r23, 0xFF	; 255
 b82:	8f 4f       	sbci	r24, 0xFF	; 255
 b84:	9f 4f       	sbci	r25, 0xFF	; 255
 b86:	08 95       	ret

00000b88 <__udivmodhi4>:
 b88:	aa 1b       	sub	r26, r26
 b8a:	bb 1b       	sub	r27, r27
 b8c:	51 e1       	ldi	r21, 0x11	; 17
 b8e:	07 c0       	rjmp	.+14     	; 0xb9e <__udivmodhi4_ep>

00000b90 <__udivmodhi4_loop>:
 b90:	aa 1f       	adc	r26, r26
 b92:	bb 1f       	adc	r27, r27
 b94:	a6 17       	cp	r26, r22
 b96:	b7 07       	cpc	r27, r23
 b98:	10 f0       	brcs	.+4      	; 0xb9e <__udivmodhi4_ep>
 b9a:	a6 1b       	sub	r26, r22
 b9c:	b7 0b       	sbc	r27, r23

00000b9e <__udivmodhi4_ep>:
 b9e:	88 1f       	adc	r24, r24
 ba0:	99 1f       	adc	r25, r25
 ba2:	5a 95       	dec	r21
 ba4:	a9 f7       	brne	.-22     	; 0xb90 <__udivmodhi4_loop>
 ba6:	80 95       	com	r24
 ba8:	90 95       	com	r25
 baa:	bc 01       	movw	r22, r24
 bac:	cd 01       	movw	r24, r26
 bae:	08 95       	ret

00000bb0 <_exit>:
 bb0:	f8 94       	cli

00000bb2 <__stop_program>:
 bb2:	ff cf       	rjmp	.-2      	; 0xbb2 <__stop_program>
